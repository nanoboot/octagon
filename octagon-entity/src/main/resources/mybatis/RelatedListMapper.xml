<?xml version="1.0" encoding="UTF-8"?>

<!--
 Octagon: Database frontend.
 Copyright (C) 2020-2022 the original author or authors.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; version 2
 of the License only.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
-->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.nanoboot.octagon.entity.impl.mappers.RelatedListMapper">

    <resultMap id="labelResultMap" type="org.nanoboot.octagon.entity.classes.EntityLabel">
        <id property="id" column="ID"/>
        <result property="label" column="NAME"/>
    </resultMap>

    <sql id="labelColumns">
        "ID", "NAME"
    </sql>

    <select id="getAssignedQueriesForWhining" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "QUERY"
        WHERE "ID" IN
        (SELECT "QUERY_ID" FROM "WHINING_ASSIGNMENT"
        WHERE "WHINING_ID" = #{whiningId})
    </select>
    <select id="getAssignedSqlQueriesForWhining" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "SQL_QUERY"
        WHERE "ID" IN
        (SELECT "SQL_QUERY_ID" FROM "WHINING_ASSIGNMENT"
        WHERE "WHINING_ID" = #{whiningId})
    </select>

    <select id="getParentWhiningsForQuery" parameterType="String" resultMap="labelResultMap">
        SELECT
        "ID", "EMAIL_SUBJECT" AS  "NAME"
        FROM "WHINING"
        WHERE "ID" IN
        (SELECT "WHINING_ID" FROM "WHINING_ASSIGNMENT"
        WHERE "QUERY_ID" = #{queryId})
    </select>
    <select id="getParentWhiningsForSqlQuery" parameterType="String" resultMap="labelResultMap">
        SELECT
        "ID", "EMAIL_SUBJECT" AS "NAME"
        FROM "WHINING"
        WHERE "ID" IN
        (SELECT "WHINING_ID" FROM "WHINING_ASSIGNMENT"
        WHERE "SQL_QUERY_ID" = #{sqlQueryId})
    </select>






    <select id="getActionLogsFor" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "ACTION_LOG"
        WHERE "OBJECT_ID" = #{id}
    </select>
    <select id="getSubPersonTasks" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "PERSON_TASK"
        WHERE "PARENT_ID" = #{personTaskId}
    </select>


    <select id="getArticlesForParentCategory" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "ARTICLE"
        WHERE "ID" IN
        (SELECT "ARTICLE_ID" FROM "CATEGORY_ASSIGNMENT"
        WHERE "PARENT_CATEGORY_ID" = #{categoryId})
    </select>
    <select id="getCategoriesForParentCategory" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "CATEGORY"
        WHERE "ID" IN
        (SELECT "CATEGORY_ID" FROM "CATEGORY_ASSIGNMENT"
        WHERE "PARENT_CATEGORY_ID" = #{categoryId})
    </select>
    <select id="getParentCategoriesForCategory" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "CATEGORY"
        WHERE "ID" IN
        (SELECT "PARENT_CATEGORY_ID" FROM "CATEGORY_ASSIGNMENT"
        WHERE "CATEGORY_ID" = #{categoryId})
    </select>
    <select id="getParentCategoriesForArticle" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "CATEGORY"
        WHERE "ID" IN
        (SELECT "PARENT_CATEGORY_ID" FROM "CATEGORY_ASSIGNMENT"
        WHERE "ARTICLE_ID" = #{articleId})
    </select>
    <!-- -&#45;&#45;-->
    <select id="getProductsForProductGroup" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "PRODUCT"
        WHERE "PRODUCT_GROUP_ID" = #{productGroupId}
    </select>
    <!-- -&#45;&#45;-->
    <select id="getProjectsForProjectGroup" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "PROJECT"
        WHERE "PROJECT_GROUP_ID" = #{projectGroupId}
    </select>


    <!-- -&#45;&#45;-->
    <select id="getProductModulesForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "PRODUCT_MODULE"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getProductComponentsForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "PRODUCT_COMPONENT"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getProductMilestonesForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "PRODUCT_MILESTONE"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getProductReleasesForProduct" parameterType="String" resultMap="labelResultMap">
		SELECT
        "PRODUCT_RELEASE"."ID" AS "ID", ("PRODUCT"."NAME" || ' : ' || "PRODUCT_VERSION"."NAME") AS "NAME",
		*
        FROM "PRODUCT_RELEASE","PRODUCT_VERSION","PRODUCT"
		WHERE "PRODUCT_RELEASE"."PRODUCT_ID"=#{productId}
		AND "PRODUCT_RELEASE"."PRODUCT_VERSION_ID"="PRODUCT_VERSION"."ID"
		AND "PRODUCT_RELEASE"."PRODUCT_ID"="PRODUCT"."ID"
    </select>
    <select id="getProductVersionsForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "PRODUCT_VERSION"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getGitlabReposForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "GITLAB_REPO"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getEpicsForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "EPIC"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getProposalsForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "PROPOSAL"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getNewFeaturesForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "NEW_FEATURE"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getEnhancementsForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "ENHANCEMENT"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getBugsForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "BUG"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getIncidentsForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "INCIDENT"
        WHERE "PRODUCT_ID" = #{productId}
    </select>
    <select id="getProblemsForProduct" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "PROBLEM"
        WHERE "PRODUCT_ID" = #{productId}
    </select>



    <select id="getProductReleasesForProductVersion" parameterType="String" resultMap="labelResultMap">
		SELECT
        "PRODUCT_RELEASE"."ID" AS "ID", ("PRODUCT"."NAME" || ' : ' || "PRODUCT_VERSION"."NAME") AS "NAME",
		*
        FROM "PRODUCT_RELEASE","PRODUCT_VERSION","PRODUCT"
		WHERE "PRODUCT_RELEASE"."PRODUCT_VERSION_ID"=#{productVersionId}
		AND "PRODUCT_RELEASE"."PRODUCT_VERSION_ID"="PRODUCT_VERSION"."ID"
		AND "PRODUCT_RELEASE"."PRODUCT_ID"="PRODUCT"."ID"
    </select>



    <select id="getStoriesForEpic" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "STORY"
        WHERE "PARENT_ID" = #{epicId}
    </select>
    <select id="getDevTasksForStory" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "DEV_TASK"
        WHERE "PARENT_ID" = #{storyId}
    </select>
    <select id="getDevSubTasksForDevTask" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "DEV_SUB_TASK"
        WHERE "PARENT_ID" = #{devTaskId}
    </select>


    <select id="getVertexesForGraph" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "GR_VERTEX"
        WHERE "GR_GRAPH_ID" = #{graphId}
    </select>
    <select id="getEdgesForGraph" parameterType="String" resultMap="labelResultMap">
        SELECT
        <include refid="labelColumns"/>
        FROM "GR_EDGE"
        WHERE "GR_GRAPH_ID" = #{graphId}
    </select>


    <select id="getGraphTagsForVertex" parameterType="String" resultMap="labelResultMap">
        SELECT
        id, value as name
        FROM "GR_GRAPH_TAG"
        WHERE "GR_VERTEX_ID" = #{vertexId}
    </select>


    <select id="getGraphPropertiesForVertex" parameterType="String" resultMap="labelResultMap">
        SELECT
        id, key||'='||value as name
        FROM "GR_GRAPH_PROPERTY"
        WHERE "GR_VERTEX_ID" = #{vertexId}
    </select>


    <select id="getGraphTagsForEdge" parameterType="String" resultMap="labelResultMap">
        SELECT
        id, value as name
        FROM "GR_GRAPH_TAG"
        WHERE "GR_EDGE_ID" = #{edgeId}
    </select>


    <select id="getGraphPropertiesForEdge" parameterType="String" resultMap="labelResultMap">
        SELECT
        id, key||'='||value as name
        FROM "GR_GRAPH_PROPERTY"
        WHERE "GR_EDGE_ID" = #{edgeId}
    </select>

    <select id="getVertexConnectionsForVertex" parameterType="String" resultMap="labelResultMap">
        SELECT EDGE__ID AS ID, EDGE__NAME||' : ()'||EDGE_REAL_DIRECTION||'('||VERTEX_NAME||')' AS NAME FROM (

select edge__id, edge__name,

CASE EDGE__REAL_direction
     WHEN 'LEFT' THEN ' &lt;--- '
	 WHEN 'RIGHT' THEN ' ---&gt; '
	 WHEN 'BOTH' THEN ' &lt;--&gt; '
	 WHEN 'NONE' THEN ' ---- '
	 WHEN 'UNDEFINED' THEN ' ~~~~ '
     ELSE ' ???? '
END AS EDGE_REAL_DIRECTION
,EDGE__REAL_RIGHT
,VERTEX_ID, 
VERTEX_NAME

 from 
--gr_vertex,
(SELECT ID AS VERTEX_ID, name AS VERTEX_NAME FROM gr_VERTEX) AS VERTEX,
(
select id as edge__id, coalesce(sortkey,999999)||'::::'||NAME as edge__name, left_gr_vertex_id as edge__left_gr_vertex_id, RIGHT_GR_VERTEX_ID as edge__RIGHT_GR_VERTEX_ID, DIRECTION as edge__DIRECTION, GR_GRAPH_ID as edge__GR_GRAPH_ID, direction as edge__real_direction, left_gr_vertex_id AS EDGE__REAL_LEFT, RIGHT_gr_vertex_id AS EDGE__REAL_RIGHT from gr_edge where 
edge__direction in ('LEFT','RIGHT') and edge__left_gr_vertex_id=#{vertexId}
union
select id as edge__id, coalesce(sortkey,999999)||'::::'||NAME as edge__name, left_gr_vertex_id as edge__left_gr_vertex_id, RIGHT_GR_VERTEX_ID as edge__RIGHT_GR_VERTEX_ID, DIRECTION as edge__DIRECTION, GR_GRAPH_ID as edge__GR_GRAPH_ID, 'LEFT' as edge__real_direction, RIGHT_gr_vertex_id AS EDGE__REAL_LEFT, left_gr_vertex_id  AS EDGE__REAL_RIGHT from gr_edge where edge__direction='RIGHT' and edge__right_gr_vertex_id=#{vertexId}
union
select id as edge__id, coalesce(sortkey,999999)||'::::'||NAME as edge__name, left_gr_vertex_id as edge__left_gr_vertex_id, RIGHT_GR_VERTEX_ID as edge__RIGHT_GR_VERTEX_ID, DIRECTION as edge__DIRECTION, GR_GRAPH_ID as edge__GR_GRAPH_ID, 'RIGHT' as edge__real_direction, RIGHT_gr_vertex_id AS EDGE__REAL_LEFT, left_gr_vertex_id  AS EDGE__REAL_RIGHT from gr_edge where edge__direction='LEFT' and edge__right_gr_vertex_id=#{vertexId}
union
select id as edge__id, coalesce(sortkey,999999)||'::::'||NAME as edge__name, left_gr_vertex_id as edge__left_gr_vertex_id, RIGHT_GR_VERTEX_ID as edge__RIGHT_GR_VERTEX_ID, DIRECTION as edge__DIRECTION, GR_GRAPH_ID as edge__GR_GRAPH_ID, direction as edge__real_direction, left_gr_vertex_id AS EDGE__REAL_LEFT, RIGHT_gr_vertex_id AS EDGE__REAL_RIGHT from gr_edge where direction not in ('LEFT','RIGHT') and (left_gr_vertex_id='599ec472-ba1e-4f16-98cd-d4d0594f5996' or right_gr_vertex_id=#{vertexId})
) AS EDGE
WHERE 1=1 AND EDGE__REAL_RIGHT=VERTEX_ID

)
    </select>



</mapper>
